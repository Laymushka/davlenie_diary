from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import sqlite3
from datetime import datetime

import os
API_TOKEN = os.getenv('API_TOKEN')

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('pressure_diary.db')
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS pressure (
    user_id INTEGER,
    date TEXT,
    systolic INTEGER,
    diastolic INTEGER,
    pulse INTEGER,
    note TEXT
)''')
conn.commit()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(KeyboardButton("üì• –°–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å"))
main_kb.add(KeyboardButton("üóì –ó–∞–ø–∏—Å—å –∑–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É"), KeyboardButton("üìÉ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–Ω–µ–≤–Ω–∏–∫"))

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.answer("üëã –Ø –±–æ—Ç –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–∏–∫–∞ –¥–∞–≤–ª–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb)

@dp.message_handler(lambda message: message.text == "üì• –°–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å")
async def new_entry(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –°–ê–î/–î–ê–î –ü—É–ª—å—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 120/80 72)")

@dp.message_handler(lambda message: '/' not in message.text and message.text.replace(' ', '').isdigit() is False)
async def handle_entry(message: types.Message):
    try:
        parts = message.text.split()
        pressure = parts[0].split('/')
        systolic = int(pressure[0])
        diastolic = int(pressure[1])
        pulse = int(parts[1]) if len(parts) > 1 else 0
        cursor.execute("INSERT INTO pressure (user_id, date, systolic, diastolic, pulse, note) VALUES (?, ?, ?, ?, ?, ?)",
                       (message.from_user.id, datetime.now().strftime('%Y-%m-%d'), systolic, diastolic, pulse, ''))
        conn.commit()
        await message.answer("‚úÖ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    except:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")

@dp.message_handler(lambda message: message.text == "üìÉ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–Ω–µ–≤–Ω–∏–∫")
async def show_diary(message: types.Message):
    cursor.execute("SELECT date, systolic, diastolic, pulse FROM pressure WHERE user_id = ? ORDER BY date DESC LIMIT 10", (message.from_user.id,))
    rows = cursor.fetchall()
    if rows:
        text = "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:\n"
        for row in rows:
            text += f"{row[0]} ‚Äî {row[1]}/{row[2]}, –ø—É–ª—å—Å {row[3]}\n"
        await message.answer(text)
    else:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

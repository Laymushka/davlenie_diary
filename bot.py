from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import sqlite3
from datetime import datetime
import pytz
import os

API_TOKEN = os.getenv('API_TOKEN')
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('pressure_diary.db')
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS pressure (
    user_id INTEGER,
    date TEXT,
    time TEXT,
    systolic INTEGER,
    diastolic INTEGER,
    pulse INTEGER,
    note TEXT
)''')
conn.commit()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(KeyboardButton("üì• –°–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å"))
main_kb.add(KeyboardButton("üóì –ó–∞–ø–∏—Å—å –∑–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É"), KeyboardButton("üìÉ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–Ω–µ–≤–Ω–∏–∫"))
main_kb.add(KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å"), KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å"))

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω—É–∂–Ω–æ–π –∑–æ–Ω–µ
TZ = pytz.timezone("Europe/Moscow")

def get_now():
    now = datetime.now(TZ)
    return now.strftime('%Y-%m-%d'), now.strftime('%H:%M')

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.answer("üëã –Ø –±–æ—Ç –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–∏–∫–∞ –¥–∞–≤–ª–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb)

@dp.message_handler(lambda message: message.text == "üì• –°–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å")
async def new_entry(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –°–ê–î/–î–ê–î –ü—É–ª—å—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 120/80 72)")

@dp.message_handler(lambda message: '/' in message.text and message.text.replace(' ', '').replace('/', '').isdigit())
async def handle_entry(message: types.Message):
    try:
        parts = message.text.split()
        pressure = parts[0].split('/')
        systolic = int(pressure[0])
        diastolic = int(pressure[1])
        pulse = int(parts[1]) if len(parts) > 1 else 0
        
        date, time = get_now()
        cursor.execute("INSERT INTO pressure (user_id, date, time, systolic, diastolic, pulse, note) VALUES (?, ?, ?, ?, ?, ?, ?)",
                       (message.from_user.id, date, time, systolic, diastolic, pulse, ''))
        conn.commit()
        await message.answer("‚úÖ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –û—à–∏–±–∫–∞: {str(e)}")

@dp.message_handler(lambda message: message.text == "üóì –ó–∞–ø–∏—Å—å –∑–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É")
async def past_entry_prompt(message: types.Message):
    await message.answer("–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å –∑–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –°–ê–î/–î–ê–î –ü—É–ª—å—Å –î–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 120/80 72 2025-05-10)")

@dp.message_handler(lambda message: '/' in message.text and message.text.replace(' ', '').replace('/', '').isdigit() and len(message.text.split()) == 3)
async def handle_past_entry(message: types.Message):
    try:
        parts = message.text.split()
        pressure = parts[0].split('/')
        systolic = int(pressure[0])
        diastolic = int(pressure[1])
        pulse = int(parts[1]) if len(parts) > 1 else 0
        past_date = parts[2]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        datetime.strptime(past_date, '%Y-%m-%d')  # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è, –≤–æ–∑–Ω–∏–∫–Ω–µ—Ç –æ—à–∏–±–∫–∞ ValueError
        
        # –í—Ä–µ–º—è –±—É–¥–µ—Ç —Ç–µ–∫—É—â–µ–µ, –∞ –¥–∞—Ç–∞ - –≤–≤–µ–¥–µ–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        date, time = get_now()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –∑–∞ —ç—Ç—É –¥–∞—Ç—É
        cursor.execute("SELECT rowid FROM pressure WHERE user_id = ? AND date = ? ORDER BY time DESC LIMIT 1", (message.from_user.id, past_date))
        existing_entry = cursor.fetchone()

        if existing_entry:
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–µ
            cursor.execute("UPDATE pressure SET systolic = ?, diastolic = ?, pulse = ? WHERE rowid = ?",
                           (systolic, diastolic, pulse, existing_entry[0]))
            conn.commit()
            await message.answer(f"‚úÖ –ó–∞–ø–∏—Å—å –∑–∞ {past_date} –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        else:
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
            cursor.execute("INSERT INTO pressure (user_id, date, time, systolic, diastolic, pulse, note) VALUES (?, ?, ?, ?, ?, ?, ?)",
                           (message.from_user.id, past_date, time, systolic, diastolic, pulse, ''))
            conn.commit()
            await message.answer(f"‚úÖ –ó–∞–ø–∏—Å—å –∑–∞ {past_date} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")

    except ValueError:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ì–ì–ì–ì-–ú–ú-–î–î")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –û—à–∏–±–∫–∞: {str(e)}")

@dp.message_handler(lambda message: message.text == "üìÉ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–Ω–µ–≤–Ω–∏–∫")
async def show_diary(message: types.Message):
    cursor.execute("SELECT rowid, date, time, systolic, diastolic, pulse FROM pressure WHERE user_id = ? ORDER BY date DESC, time DESC LIMIT 10", (message.from_user.id,))
    rows = cursor.fetchall()
    if rows:
        text = "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:\n"
        for row in rows:
            text += f"{row[1]} {row[2]} ‚Äî {row[3]}/{row[4]}, –ø—É–ª—å—Å {row[5]}\n"
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
            inline_kb = InlineKeyboardMarkup(row_width=2)
            inline_kb.add(
                InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{row[0]}"),
                InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{row[0]}")
            )
            await message.answer(text, reply_markup=inline_kb)
    else:
        await message.answer("üìç –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")

@dp.callback_query_handler(lambda c: c.data.startswith('edit_'))
async def edit_entry(callback_query: types.CallbackQuery):
    record_id = int(callback_query.data.split('_')[1])
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–ø–∏—Å–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await dp.current_state(user=callback_query.from_user.id).set_state('editing', data={'record_id': record_id})
    await bot.answer_callback_query(callback_query.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –°–ê–î/–î–ê–î –ü—É–ª—å—Å")

@dp.callback_query_handler(lambda c: c.data.startswith('delete_'))
async def delete_entry(callback_query: types.CallbackQuery):
    record_id = int(callback_query.data.split('_')[1])
    cursor.execute("SELECT date FROM pressure WHERE rowid = ?", (record_id,))
    record = cursor.fetchone()
    if record:
        cursor.execute("DELETE FROM pressure WHERE rowid = ?", (record_id,))
        conn.commit()
        await bot.answer_callback_query(callback_query.id, text=f"üóë –ó–∞–ø–∏—Å—å –∑–∞ {record[0]} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await bot.answer_callback_query(callback_query.id, text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å.")

@dp.message_handler(state='editing')
async def handle_editing(message: types.Message):
    state_data = await dp.current_state(user=message.from_user.id).get_data()
    record_id = state_data.get('record_id')

    try:
        parts = message.text.split()
        pressure = parts[0].split('/')
        systolic = int(pressure[0])
        diastolic = int(pressure[1])
        pulse = int(parts[1]) if len(parts) > 1 else 0
        
        cursor.execute("UPDATE pressure SET systolic = ?, diastolic = ?, pulse = ? WHERE rowid = ?",
                       (systolic, diastolic, pulse, record_id))
        conn.commit()
        await message.answer("‚úÖ –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –û—à–∏–±–∫–∞: {str(e)}")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
